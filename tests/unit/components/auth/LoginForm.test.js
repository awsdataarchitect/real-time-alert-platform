import React from 'react';\nimport { render, screen, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport LoginForm from '../../../../src/components/auth/LoginForm';\nimport { AuthProvider } from '../../../../src/context/AuthContext';\nimport { signIn } from 'aws-amplify/auth';\n\n// Mock AWS Amplify Auth\njest.mock('aws-amplify/auth', () => ({\n  getCurrentUser: jest.fn(),\n  signIn: jest.fn(),\n  fetchAuthSession: jest.fn()\n}));\n\nconst renderWithAuth = (component) => {\n  return render(\n    <AuthProvider>\n      {component}\n    </AuthProvider>\n  );\n};\n\ndescribe('LoginForm', () => {\n  const mockOnSuccess = jest.fn();\n  const mockOnSwitchToRegister = jest.fn();\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should render login form with all required fields', () => {\n    renderWithAuth(\n      <LoginForm \n        onSuccess={mockOnSuccess} \n        onSwitchToRegister={mockOnSwitchToRegister} \n      />\n    );\n\n    expect(screen.getByTestId('login-form')).toBeInTheDocument();\n    expect(screen.getByTestId('username-input')).toBeInTheDocument();\n    expect(screen.getByTestId('password-input')).toBeInTheDocument();\n    expect(screen.getByTestId('login-submit')).toBeInTheDocument();\n    expect(screen.getByTestId('switch-to-register')).toBeInTheDocument();\n  });\n\n  it('should show validation error for empty fields', async () => {\n    const user = userEvent.setup();\n    \n    renderWithAuth(\n      <LoginForm \n        onSuccess={mockOnSuccess} \n        onSwitchToRegister={mockOnSwitchToRegister} \n      />\n    );\n\n    await user.click(screen.getByTestId('login-submit'));\n\n    await waitFor(() => {\n      expect(screen.getByTestId('login-error')).toHaveTextContent('Please fill in all fields');\n    });\n  });\n\n  it('should handle successful login', async () => {\n    const user = userEvent.setup();\n    signIn.mockResolvedValue({ isSignedIn: true });\n    \n    renderWithAuth(\n      <LoginForm \n        onSuccess={mockOnSuccess} \n        onSwitchToRegister={mockOnSwitchToRegister} \n      />\n    );\n\n    await user.type(screen.getByTestId('username-input'), 'testuser');\n    await user.type(screen.getByTestId('password-input'), 'password123');\n    await user.click(screen.getByTestId('login-submit'));\n\n    await waitFor(() => {\n      expect(signIn).toHaveBeenCalledWith({\n        username: 'testuser',\n        password: 'password123'\n      });\n      expect(mockOnSuccess).toHaveBeenCalled();\n    });\n  });\n\n  it('should handle login failure', async () => {\n    const user = userEvent.setup();\n    signIn.mockRejectedValue(new Error('Invalid credentials'));\n    \n    renderWithAuth(\n      <LoginForm \n        onSuccess={mockOnSuccess} \n        onSwitchToRegister={mockOnSwitchToRegister} \n      />\n    );\n\n    await user.type(screen.getByTestId('username-input'), 'testuser');\n    await user.type(screen.getByTestId('password-input'), 'wrongpassword');\n    await user.click(screen.getByTestId('login-submit'));\n\n    await waitFor(() => {\n      expect(screen.getByTestId('login-error')).toHaveTextContent('Invalid credentials');\n      expect(mockOnSuccess).not.toHaveBeenCalled();\n    });\n  });\n\n  it('should switch to register form when link is clicked', async () => {\n    const user = userEvent.setup();\n    \n    renderWithAuth(\n      <LoginForm \n        onSuccess={mockOnSuccess} \n        onSwitchToRegister={mockOnSwitchToRegister} \n      />\n    );\n\n    await user.click(screen.getByTestId('switch-to-register'));\n\n    expect(mockOnSwitchToRegister).toHaveBeenCalled();\n  });\n\n  it('should clear error when user starts typing', async () => {\n    const user = userEvent.setup();\n    \n    renderWithAuth(\n      <LoginForm \n        onSuccess={mockOnSuccess} \n        onSwitchToRegister={mockOnSwitchToRegister} \n      />\n    );\n\n    // Trigger validation error\n    await user.click(screen.getByTestId('login-submit'));\n    \n    await waitFor(() => {\n      expect(screen.getByTestId('login-error')).toBeInTheDocument();\n    });\n\n    // Start typing to clear error\n    await user.type(screen.getByTestId('username-input'), 'test');\n\n    await waitFor(() => {\n      expect(screen.queryByTestId('login-error')).not.toBeInTheDocument();\n    });\n  });\n\n  it('should disable submit button while loading', async () => {\n    const user = userEvent.setup();\n    // Mock a slow login response\n    signIn.mockImplementation(() => new Promise(resolve => setTimeout(() => resolve({ isSignedIn: true }), 1000)));\n    \n    renderWithAuth(\n      <LoginForm \n        onSuccess={mockOnSuccess} \n        onSwitchToRegister={mockOnSwitchToRegister} \n      />\n    );\n\n    await user.type(screen.getByTestId('username-input'), 'testuser');\n    await user.type(screen.getByTestId('password-input'), 'password123');\n    \n    const submitButton = screen.getByTestId('login-submit');\n    await user.click(submitButton);\n\n    expect(submitButton).toBeDisabled();\n    expect(submitButton).toHaveTextContent('Signing In...');\n  });\n\n  it('should have proper accessibility attributes', () => {\n    renderWithAuth(\n      <LoginForm \n        onSuccess={mockOnSuccess} \n        onSwitchToRegister={mockOnSwitchToRegister} \n      />\n    );\n\n    const usernameInput = screen.getByTestId('username-input');\n    const passwordInput = screen.getByTestId('password-input');\n\n    expect(usernameInput).toHaveAttribute('autoComplete', 'username');\n    expect(passwordInput).toHaveAttribute('autoComplete', 'current-password');\n    expect(usernameInput).toHaveAttribute('required');\n    expect(passwordInput).toHaveAttribute('required');\n  });\n});